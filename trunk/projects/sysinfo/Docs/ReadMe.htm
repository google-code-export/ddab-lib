<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!--
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/
 *
 * Copyright (C) 2005-2014, Peter Johnson (www.delphidabbler.com).
 *
 * $Rev$
 * $Date$
 *
 * Read-me file for System Information Unit.
-->
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">

<head>

  <title>
    DelphiDabbler System Information Unit ReadMe
  </title>

  <style type="text/css">
    body {
      margin: 1em;
      padding: 0;
      font-family: Verdana, Arial, sans-serif;
      font-size: 9pt;
      line-height: 150%;
    }
    h1 {
      margin: 0 0 1em 0;
      padding: 0.5em;
      border: 1px silver solid;
      background-color: #eee;
      font-size: 13pt;
      font-weight: bold;
      text-align: center;
    }
    h1 .subtitle {
      font-style: italic;
      color: #336;
    }
    h2 {
      margin: 1em 0 0 0;
      padding: 0;
      padding-bottom: 6px;
      border-bottom: 1px silver solid;
      font-size: 11pt;
      font-weight: bold;
    }
    h3 {
      margin: 0.5em 0 0 0;
      padding: 0;
      font-size: 9pt;
      font-weight: bold;
    }
    p {
      margin: 0.5em 0 0 0;
      padding: 0;
    }
    ul, ol {
      margin: 0.5em 0 0 3em;
      padding: 0;
    }
    ul {
      list-style-type: square;
    }
    ul.spaced li,
    ol.spaced li {
      margin-top: 0.5em;
    }
    ul.spaced li,
    ol.spaced li {
      margin-top: 0.5em;
    }
    ul.unspaced li,
    ol.unspaced li {
      margin-top: 0;
    }
    ul.unspaced li.first,
    ol.unspaced li.first {
      margin-top: 0.5em;
    }
    code {
      font-family: "Courier New", Courier, monospace;
    }
    a:link {
      color: #336;
      text-decoration: underline;
    }
    a:visited {
      color: #669;
      text-decoration: underline;
    }
    a:active {
      color: #336;
      text-decoration: underline;
    }
    a:hover {
      text-decoration: underline;
    }
    .gototop {
      margin: 1em 0 0 0;
      padding: 0.3em 0 0 0;
      text-align: center;
      position: relative;
      float: right;
      font-weight: bold;
    }
    .pullout {
      border-left: 8px silver solid;
      background-color: #eee;
      margin: 0.5em 0 0 0;
      padding: 0.25em 0.5em;
      font-style: italic;
    }
    .indent {
      margin-left: 3em;
    }
    .highlight {
      color: #336;
      font-style: italic;
      font-weight: bold;
    }
    .endnotes {
      margin: 1.5em 0 0 0;
      padding: 1em 0 0 0;
      border-top: 1px silver solid;
    }
    .comments {
      font-style: italic;
    }
    .copyright,
    .copyright a:link,
    .copyright a:visited,
    .copyright a:active {
      margin: 1em 0 0 0;
      color: gray;
      font-size: 8pt;
      text-align: right;
    }
  </style>

</head>

<body>

<h1>
  <div>System Information Unit</div>
  <div class="subtitle">ReadMe</div>
</h1>

<h2 id="contents">
  Contents
</h2>

<ul>
  <li><a href="#description">Description</a></li>
  <li><a href="#installation">Installation</a></li>
  <li><a href="#docs">Documentation</a></li>
  <li><a href="#demo">Demo Projects</a></li>
  <li><a href="#update">Update History</a></li>
  <li><a href="#license">License</a></li>
  <li><a href="#bugs">Bugs and Feature Requests</a></li>
  <li><a href="#author">About the Author</a></li>
</ul>

<p class="gototop">
  &raquo; <a href="#contents">Contents</a>
</p>

<h2 id="description">
  Description
</h2>

<p>
  This unit contains a group of static classes and some global variables that
  provide information about the user's computer system and operating system.
  Some useful constants and type definitions are also included. The static
  classes are:
</p>

<ul>
  <li>
    <var>TPJComputerInfo</var> &ndash; provides information about the host
    computer and current user.
  </li>

  <li>
    <var>TPJSystemFolders</var> &ndash; gets the full path to certain system
    folders.
  </li>

  <li>
    <var>TPJOSInfo</var> &ndash; supplies information about the operating
    system information including the platform, product name, product ID code,
    version and service packs.
  </li>
</ul>

<p>
  In addition, the unit extends and enhances the information provided by the
  <code>SysUtils</code> unit's <var>Win32xxx</var> variables (such as
  <var>Win32Platform</var>) by defining further <var>Win32xxx</var> variables
  that store the extended operating system information available on later NT
  platform OSs.
</p>

<h3>
  Effect of changes to the Windows API
</h3>

<p>
  With the release of Windows 8.1 Microsoft made a controversial decision to
  deprecate the <var>GetVersion***</var> API functions commonly used to retrieve
  Windows operating system information. These functions are used by the
  <em>System Information Unit</em>. Not only that, but when interrogated using
  the <var>GetVersion***</var> functions Windows 8.1 represents itself as
  Windows 8 unless the host program has a <a
    href="http://msdn.microsoft.com/en-us/library/windows/desktop/dn481241.aspx"
  >special manifest</a>.
</p>

<p>
  From release 5.0 the unit has been revised to use an alternative approach for
  getting operating system information that avoids the use of the deprecated
  API on later Windows versions and which gets the correct version from
  Windows 8.1.
</p>

<p>
  Apart from being more cumbersome and slower, the new approach differs from the
  old in an important respect. When a program is run in compatibility mode the
  old <var>GetVersion***</var> API functions would be fooled (or
  &quot;spoofed&quot;) by Windows into reporting the version of the operating
  system emulated by the compatibility mode (more or less!). This is the way the
  unit has always behaved in the past. The revised approach always returns
  information about the true operating system regardless of any active
  compatibility mode. In many ways this is a better solution but unfortunately
  the API functions required are only available on Windows 2000 and later.
</p>

<p>
  The upshot is that older OSs will have to use the <var>GetVersion***</var>
  API and be subject to OS information spoofing while newer OSs, to avoid using
  the deprecated API functions, will need to use the new API and therefore never
  be spoofed. Herein lies an inconsistency. Thanks a bundle Microsoft!
  The choice has to be made whether to accept the inconsistency or to allow the
  use of deprecated API code and fail to detect Windows 8.1. The default choice
  v5 of the <em>System Information Unit</em> is to use the older API for Windows
  XP and earlier and the new API for Windows Vista and later. However there are
  options to override this decision at compile time that are discussed in the
  following section.
</p>

<p>
  To make things easier for Windows 2000 and later users (i.e. just about
  everyone) a bunch of interrogation functions that can't be spoofed have been
  added to <var>TPJOSInfo</var>. You can also find out if OS spoofing is enabled
  for the host operating system by examining the <var>CanSpoof</var> method of
  <var>TPJOSInfo</var>.
</p>

<h3>
  Compile Options
</h3>

<p>
  From v5 the <em>System Information Unit</em> can be compiled in three
  different ways. Each makes a different choice about how the deprecation of the
  old <var>GetVersion***</var> API functions is handled. The options are
  controlled by defining or un-defining the
  <code>IGNORE_OS_SPOOFING_FROM_VISTA_UP</code> and
  <code>IGNORE_OS_SPOOFING_FROM_8POINT1_UP</code> symbols. The choices are:
</p>

<ul>
  <li>
    <p>
      Define <code>IGNORE_OS_SPOOFING_FROM_VISTA_UP</code> only. This is the
      default.
    </p>
    <p>
      With this option the old <var>GetVersion***</var> API functions are used
      to get version information for Windows XP and earlier, which means those
      OS will still be subject to compatibility mode spoofing. The new approach
      has been used for Windows Vista and later meaning the the correct
      information will always be reported regardless of compatibility mode.
    </p>
    <p>
      The choice to make the division between XP and Vista was made because
      Vista supports the new API and we can get all required information for it
      without using the <var>GetVersion***</var> API functions. While XP also
      supports the new API we still need to use the the <var>GetVersion***</var>
      functions to retrieve some necessary information.
    </p>
    <p>
      This option has the advantages that (a) the new API is used on the
      earliest possible OS, (b) no deprecated API calls are used and (c) Windows
      8.1 is detected correctly. This is the best choice if your applications
      don't need to be run in compatibility mode and you want to detect Windows
      8.1.
    </p>
  </li>
  <li>
    <p>
      Define <code>IGNORE_OS_SPOOFING_FROM_8POINT1_UP</code> only.
    </p>
    <p>
      When this option is used the <var>GetVersion***</var> API functions are
      used up until the point that they are deprecated, i.e. they are used for
      all OSs up to and including Windows 8. The new API is used for Windows
      8.1 (and with later versions when they arrive).
    </p>
    <p>
      This has the advantages that (a) no deprecated code is used (b) the
      traditional OS spoofing behaviour is retained as long a possible and (c)
      Windows 8.1 is detected correctly.
    </p>
  </li>
  <li>
    <p>
      Define neither <code>IGNORE_OS_SPOOFING_FROM_VISTA_UP</code> nor
      <code>IGNORE_OS_SPOOFING_FROM_8POINT1_UP</code>.
    </p>
    <p>
      This option reverts the unit to its pre-v5 behaviour: it always uses the
      <var>GetVersion***</var> API functions to get OS information.
    </p>
    <p>
      This has the advantages of (a) consistency (b) full backward
      compatibility. The disadvantages are that (a) a deprecated API is used
      with Windows 8.1 and (b) Windows 8.1 will be reported as Windows 8 on all
      applications that don't have the required manifest.
    </p>
  </li>
</ul>

<h3>
  Deleted Code
</h3>

<p>
  Version 2 and earlier of the unit provided the <em>TPJSysInfo</em> component
  and various <var>SIGetxxx</var> functions. As of v3.0 these were deprecated
  and included only if a certain symbol was defined. From v4.0 all the
  deprecated code was removed.
</p>

<h3>
  Compatibility
</h3>

<p>
  This unit is designed for compilation with the 32 bit and 64 bit Windows
  Delphi compilers. It has been tested with Delphi 7, 2006, 2007, 2009, 2010,
  XE and XE2 to XE4. An attempt has been made to retain compatibility back to
  Delphi 4, but this has not been tested.
</p>

<p>
  Compilation on old Delphi versions that do not support setting registry access
  flags via <var>TRegistry</var> is not recommended since parts of the code may
  not work correctly on 64 bit Windows. <strong>Use of Delphi 6 or later is
  strongly recommended.</strong>
</p>

<p>
  The unit not compatible with .NET.
</p>

<p>
  The unit should operate correctly on the following platforms:
</p>

<ul>
  <li>
    Windows 95 to Me (but the latest version has not been tested).
  </li>
  <li>
    All 32 bit NT platform operating systems (tested on Windows Vista).
  </li>
  <li>
    Windows 64 bit, either as part of a 32 bit or 64 bit process (tested on
    Windows 7).
  </li>
</ul>

<p>
  The code is not suitable for non-Windows operating systems since it depends on
  the Windows API.
</p>

<p class="gototop">
  &raquo; <a href="#contents">Contents</a>
</p>

<h2 id="installation">
  Installation
</h2>

<p>
  The <em>System Information Unit</em> and demo programs are supplied in a zip
  file. Before installing you need to extract all the files, preserving the
  directory structure. The following files will be extracted:
</p>

<ul>
  <li>
    <code><strong>PJSysInfo.pas</strong></code> &ndash; Source code of the
    static classes, global variables, constants and type definitions.
  </li>
  <li>
    <code>ReadMe.htm</code> &ndash; This read-me file.
  </li>
  <li>
    <code>ChangeLog.txt</code> &ndash; The unit's change log.
  </li>
  <li>
    <code>MPL-2.0.txt</code> &ndash; Mozilla Public Licence v2.0.
  </li>
  <li>
    <code>Documentation.URL</code> &ndash; Short-cut to online documentation.
  </li>
</ul>

<p>
  In addition to the above files you will find the source code of two demo
  projects and their read-me file in the <code>Demos</code> directory.
</p>

<p>
  There are three possible ways to use the unit.
</p>

<ol class="spaced">
  <li>
    The simplest way is to add <code>PJSysInfo.pas</code> to your projects as
    you need it.
  </li>
  <li>
    To make the unit easier to re-use you can either copy it to a folder on your
    Delphi search path, or add the folder where you extracted the unit to the
    search path. You then simply use the unit as required without needing to add
    it to your project.
  </li>
  <li>
    For maximum portability you can add the unit to a Delphi package. If you
    need help doing this <a
      href="http://www.delphidabbler.com/url/install-comp"
    >see here</a>.
  </li>
</ol>

<p class="gototop">
  &raquo; <a href="#contents">Contents</a>
</p>

<h2 id="docs">
  Documentation
</h2>

<p>
  The <em>System Information Unit</em> is fully <a
    href="http://delphidabbler.com/url/sysinfo-docs"
  >documented online</a>.
</p>

<p>
  There is no help file.
</p>

<p class="gototop">
  &raquo; <a href="#contents">Contents</a>
</p>

<h2 id="demo">
  Demo Projects
</h2>

<p>
  Two demo projects are included in the download in the <code>Demos\VCL</code>
  and the <code>Demos\FMX</code> directories. The former compiles to a VCL
  application using Delphi 7 or (and possibly even Delphi 4) or later while the
  latter uses the FireMonkey 2 framework and requires Delphi XE3 as a minimum.
  Both projects can be compiled to either Windows 32 bit or 64 bit targets.
</p>

<p>
  Each project contains a tab set where each tab displays the information from
  one of the classes or the global variables.
</p>

<p class="gototop">
  &raquo; <a href="#contents">Contents</a>
</p>

<h2 id="update">
  Update History
</h2>

<p>
  A complete change log is provided in a text file that is included in the
  download.
</p>

<p class="gototop">
  &raquo; <a href="#contents">Contents</a>
</p>

<h2 id="license">
  License
</h2>

<p>
  The <em>System Information Unit</em> is released under the terms of the <a
    href="http://www.mozilla.org/MPL/2.0/"
  >Mozilla Public License, v2.0</a>.
</p>

<p class="gototop">
  &raquo; <a href="#contents">Contents</a>
</p>

<h2 id="bugs">
  Bugs and Feature Requests
</h2>

<p>
  Bugs can be reported or new features requested via the <a
    href="http://www.delphidabbler.com/url/ddlib-issues"
  >Issue Tracker</a>.
</p>

<p>
  If no similar report or request has been recorded already, use the <em>New
  Issue</em> link to add a new issue. Please select the most appropriate
  template from the <em>Templates</em> drop down list and make sure the
  <code>Project-sysinfo</code> label is specified.
</p>

<p class="gototop">
  &raquo; <a href="#contents">Contents</a>
</p>

<h2 id="author">
  About the Author
</h2>

<p>
  I'm Peter Johnson &ndash; a hobbyist programmer living in Ceredigion in West
  Wales, UK, writing write mainly in Delphi. My programs and code are available
  from: <a
    href="http://www.delphidabbler.com/"
  >http://www.delphidabbler.com/</a>.
</p>

<p>
  I can be <a
    href="http://www.delphidabbler.com/contact"
  >contacted via the website.</a>
</p>

<div class="endnotes">

  <div class="comments">
    Please <a
      href="http://www.delphidabbler.com/contact"
    >let me know</a> if you have any comments about the component, but please
    use the Issue Tracker noted above to report bugs and request new features.
  </div>

  <div class="copyright">
    This document is copyright &copy; 2005-2014, P D Johnson, <a
      href="http://www.delphidabbler.com/"
    >www.delphidabbler.com</a>.
  </div>

</div>

</body>

</html>
