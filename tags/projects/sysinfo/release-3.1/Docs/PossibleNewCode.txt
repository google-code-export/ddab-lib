interface 

type
  {
  TPJSHCtrlLibs:
    Enumeration that identifies the three main DLLs that implement the shell
    and common controls. Used in testing the installed DLL version numbers.
  }
  TPJSHCtrlLibs = (
    slComctl32,   // Comctl32.dll
    slShell32,    // Shell32.dll
    slShlwapi     // Shlwapi.dll
  );

TPJSysInfo
  public
    function SHCtrlLibVer(const DLLID: TPJSHCtrlLibs): LongWord;
      {Returns version number of Shell or Common Control DLL identified by
      DLLID. The version number is packed into a LongWord, with the Hi word
      containing the major version number and the Lo word containing the minor
      version number. If the DLL does not expert its version number then 0 is
      returned}

function SIGetSHCtrlLibVer(const DLLID: TPJSHCtrlLibs): LongWord;
  {Returns version number of Shell or Common Control DLL identified by DLLID.
  The version number is packed into a LongWord, with the Hi word containing the
  major version number and the Lo word containing the minor version number. If
  the DLL does not expert its version number then 0 is returned}


implementation


function SIGetSHCtrlLibVer(const DLLID: TPJSHCtrlLibs): LongWord;
  {Returns version number of Shell or Common Control DLL identified by DLLID.
  The version number is packed into a LongWord, with the Hi word containing the
  major version number and the Lo word containing the minor version number. If
  the DLL does not expert its version number then 0 is returned}
type
  // Structure that receives DLL-specific version information - used with
  // DllGetVersion function.
  TDllVersionInfo = packed record
    cbSize: DWORD;          // size of structure: required
    dwMajorVersion: DWORD;  // major version of DLL
    dwMinorVersion: DWORD;  // minor version of DLL
    dwBuildNumber: DWORD;   // build number of DLL
    dwPlatformID: DWORD;    // identifies platform for which DLL was built
  end;
  // Prototype of function exported by shell and common controls libraries (from
  // version 4.71
  TDllGetVersion = function(var DLLVerInfo: TDllVersionInfo): HResult; stdcall;
const
  // Maps control library enumeration onto DLL names
  cDLLNames: array[TPJSHCtrlLibs] of PChar = (
    'Comctl32.dll', 'Shell32.dll', 'Shlwapi.dll'
  );
var
  DLLHandle: THandle;             // handle to required DLL
  DLLVerInfo: TDllVersionInfo;    // DLL ver info structure for DllGetVersion fn
  DllGetVersion: TDllGetVersion;  // Function exported from DLLs
begin
  // Note: this is a translation of code from MSDN
  // Assume failure
  Result := 0;
  // Try to load DLL
  DLLHandle := LoadLibrary(cDLLNames[DLLID]);
  if DLLHandle <> 0 then
  begin
    try
      // Attempt to import DllGetVersion function
      DllGetVersion := GetProcAddress(DLLHandle, 'DllGetVersion');
      if Assigned(DllGetVersion) then
      begin
        // Call function to get ver info in DLLVerInfo structure
        FillChar(DLLVerInfo, SizeOf(DLLVerInfo), 0);
        DLLVerInfo.cbSize := SizeOf(DLLVerInfo);
        if Succeeded(DllGetVersion(DLLVerInfo)) then
        begin
          // We have ver info: pack it into result
          LongRec(Result).Hi := Word(DLLVerInfo.dwMajorVersion);
          LongRec(Result).Lo := Word(DLLVerInfo.dwMinorVersion);
        end;
      end;
    finally
      FreeLibrary(DLLHandle);
    end;
  end;
end;

function TPJSysInfo.SHCtrlLibVer(const DLLID: TPJSHCtrlLibs): LongWord;
  {Returns version number of Shell or Common Control DLL identified by DLLID.
  The version number is packed into a LongWord, with the Hi word containing the
  major version number and the Lo word containing the minor version number. If
  the DLL does not export its version number then 0 is returned}
begin
  Result := SIGetSHCtrlLibVer(DLLID);
end;

