#summary PJSysInfoUnit global variables.
<wiki:comment>
$Rev$
$Date$
</wiki:comment>

Project: [SystemInformationUnit System Information Unit]

Unit: _PJSysInfo_.

= PJSysInfo Global Variables =

The _PJSysInfo_ unit defines several global variables containing extended operating system information. These variables build on similar _Win32XXX_ variables defined in the _!SysUtils unit_.

The variables defined in _PJSysInfo_ are:

  * [#Win32PlatformEx Win32PlatformEx] [v5.0]
  * [#Win32MajorVersionEx Win32MajorVersionEx] [v5.0]
  * [#Win32MinorVersionEx Win32MinorVersionEx] [v5.0]
  * [#Win32BuildNumberEx Win32BuildNumberEx] [v5.0]
  * [#Win32CSDVersionEx Win32CSDVersionEx] [v5.0]
  * [#Win32HaveExInfo Win32HaveExInfo]
  * [#Win32ServicePackMajor Win32ServicePackMajor]
  * [#Win32ServicePackMinor Win32ServicePackMinor]
  * [#Win32SuiteMask Win32SuiteMask]
  * [#Win32ProductType Win32ProductType]
  * [#Win32HaveProductInfo Win32HaveProductInfo]
  * [#Win32ProductInfo Win32ProductInfo]


== !Win32PlatformEx [v5.0] ==

{{{
var Win32PlatformEx: Integer;
}}}

_!Win32PlatformEx_ records the current operating system platform. This is one of `VER_PLATFORM_WIN32_NT`, `VER_PLATFORM_WIN32_WINDOWS` or (very unlikely) `VER_PLATFORM_WIN32s`.

This variable is an analogue of _!Win32Platform_ variable defined in _!SysUtils_ except that, on operating systems that support it, _!Win32PlatformEx_'s value is not spoofed when the program is running in compatibility mode.

Whether _!Win32PlatformEx_ can be spoofed depends on the value returned by _[TPJOSInfoCanSpoof TPJOSInfo.CanSpoof]_. A value of `False` means _!Win32PlatformEx_ returns the correct platform for the host operating system while `True` means that _!Win32PlatformEx_ is spoofed by compatibility mode into returning the platform represented by the emulated operating system.

_!Win32Platform_, on the other hand, is always spoofed by compatibility mode.


== !Win32MajorVersionEx [v5.0] ==

{{{
var Win32MajorVersionEx: LongWord;
}}}

Records the major version number of the operating system.

This variable is an analogue of _!Win32MajorVersion_ variable defined in _!SysUtils_ except that, on operating systems that support it, _!Win32MajorVersionEx_'s value is not spoofed when the program is running in compatibility mode, whereas _!Win32MajorVersion_ is always spoofed in these circumstances.

Whether _!Win32MajorVersionEx_ can be spoofed depends on the value returned by _[TPJOSInfoCanSpoof TPJOSInfo.CanSpoof]_. A value of `False` means _!Win32MajorVersionEx_ returns the correct major version number for the host operating system while `True` means that _!Win32MajorVersionEx_ is spoofed by compatibility mode into returning the major version represented by the emulated operating system.


== !Win32MinorVersionEx [v5.0] ==

{{{
var Win32MinorVersionEx: LongWord;
}}}

Records the minor version number of the operating system.

This variable is an analogue of _!Win32MinorVersion_ variable defined in _!SysUtils_ except that, on operating systems that support it, _!Win32MinorVersionEx_'s value is not spoofed when the program is running in compatibility mode, whereas _!Win32MinorVersion_ is always spoofed in these circumstances.

Whether _!Win32MinorVersionEx_ can be spoofed depends on the value returned by _[TPJOSInfoCanSpoof TPJOSInfo.CanSpoof]_. A value of `False` means _!Win32MinorVersionEx_ returns the correct minor version number for the host operating system while `True` means that _!Win32MinorVersionEx_ is spoofed by compatibility mode into returning the minor version represented by the emulated operating system.


== !Win32BuildNumberEx [v5.0] ==

{{{
var Win32BuildNumberEx: Integer;
}}}

Records the build number of the operating system.

This variable is an analogue of _!Win32BuildNumber_ variable defined in _!SysUtils_ except that, on operating systems that support it, _!Win32BuildNumberEx_'s value is not spoofed when the program is running in compatibility mode. _!Win32BuildNumber_ is always spoofed in these circumstances.

Whether _!Win32BuildNumberEx_ can be spoofed depends on the value returned by _[TPJOSInfoCanSpoof TPJOSInfo.CanSpoof]_. A value of `False` means _!Win32BuildNumberEx_ returns the correct build number for the host operating system while `True` means that _!Win32BuildNumberEx_ is spoofed by compatibility mode into returning the build number represented by the emulated operating system.


== Win32CSDVersionEx [v5.0] ==

{{{
var Win32CSDVersionEx: string;
}}}

Stores the name of any service pack applied to the operating system. The value is the empty string if there is no service pack.

This variable is an analogue of _Win32CSDVersion_ variable defined in _!SysUtils_ except that, on operating systems that support it, _Win32CSDVersionEx_'s value is not spoofed when the program is running in compatibility mode. _Win32CSDVersion_ is always spoofed in these circumstances.

Whether _Win32CSDVersionEx_ can be spoofed depends on the value returned by _[TPJOSInfoCanSpoof TPJOSInfo.CanSpoof]_. A value of `False` means _Win32CSDVersionEx_ returns the correct service pack string for the host operating system while `True` means that _Win32CSDVersionEx_ is spoofed by compatibility mode into returning the service pack of the emulated operating system.


== !Win32HaveExInfo ==

{{{
var Win32HaveExInfo: Boolean;
}}}

This global variable is `True` if extended operating system information is available and `False` if not. When `False` the values of the _[#Win32ServicePackMajor Win32ServicePackMajor]_, _[#Win32ServicePackMinor Win32ServicePackMinor]_, _[#Win32SuiteMask Win32SuiteMask]_ and _[#Win32ProductType Win32ProductType]_ variables are not valid and should not be used.

Extended operating system information is available only on Windows NT platform operating systems from and including Windows NT4 Service Pack 6.

Compatibility modes have no effect on _Win32HaveExInfo_: its value depends on the capabilities of the actual operating system, even in cases where the emulated operating system would not natively support extended information.


== !Win32ServicePackMajor ==

{{{
var Win32ServicePackMajor: string;
}}}

This global variable stores the major version number the operating system's service pack or `0` if the OS has no service pack applied.

Note that this variable only stores valid information if the _[#Win32HaveExInfo Win32HaveExInfo]_ variable is `True`.

Running the host program in compatibility mode _!Win32ServicePackMajor_ is always spoofed to return the major version of any service pack that relates to the emulated operating system.

[v5.0] When running on operating systems where _[TPJOSInfoCanSpoof TPJOSInfo.CanSpoof]_ returns `False`, compatibility mode no longer spoofs _!Win32ServicePackMajor_ and it will return the service pack major version of the actual operating system.


== !Win32ServicePackMinor ==

{{{
var Win32ServicePackMinor: string;
}}}

This global variable stores any minor version number the operating system's service pack. If _!Win32ServicePackMajor_ returns `0` then _!Win32ServicePackMinor_ will also return `0`.

Note that this variable only stores valid information if the _[#Win32HaveExInfo Win32HaveExInfo]_ variable is `True`.

Running the host program in compatibility mode _!Win32ServicePackMinor_ is always spoofed to return the minor version of any service pack that relates to the emulated operating system.

[v5.0] When running on operating systems where _[TPJOSInfoCanSpoof TPJOSInfo.CanSpoof]_ returns `False`, compatibility mode no longer spoofs _!Win32ServicePackMinor_ and it will return the service pack minor version of the actual operating system.


== !Win32SuiteMask ==

{{{
var Win32SuiteMask: Integer;
}}}

This global variable stores a combination of bit flags that identify the product suites available on the system. The value is a combination of _VER_SUITE_xxx_ constants that are defined by Microsoft. The constants are declared in the _PJSysInfo_ unit.

Note that this variable only stores valid information if the _[#Win32HaveExInfo Win32HaveExInfo]_ variable is true.

Compatibility mode has no effect on this value.

[v5.0] When running on operating systems where _[TPJOSInfoCanSpoof TPJOSInfo.CanSpoof]_ returns `False` _!Win32SuiteMask_ always returns `0`. You should get product information from the _[#Win32ProductInfo Win32ProductInfo]_ instead.


== !Win32ProductType ==

{{{
var Win32ProductType: Integer;
}}}

This global variable stores additional information about an operating system product.a. The value one of the _VER_NT_xxx_ constants defined by Microsoft. The constants are declared in the _PJSysInfo_ unit.

Note that this variable only stores valid information if the _[#Win32HaveExInfo Win32HaveExInfo]_ variable is true.

Compatibility mode has no effect on this value: running an emulation of a server operating system on a desktop system leaves _!Win32ProductType_ with the value of `VER_NT_WORKSTATION` instead of changing it to `VER_NT_SERVER` as would be the case for a genuine server operating system.


== !Win32HaveProductInfo ==

{{{
var Win32HaveProductInfo: Boolean;
}}}

This global variable informs whether product information is available from the operating system. Such information is obtained from the Windows API function _!GetProductInfo_, which is available on Windows Vista and later operating systems.

When _!Win32HaveProductInfo_ is True the product information code can be read from _[#Win32ProductInfo Win32ProductInfo]_, otherwise _!Win32ProductInfo_ is set to 0.

Compatibility modes have no effect on _Win32HaveProductInfo_: its value depends on the capabilities of the actual operating system, even in cases where the emulated operating system would not natively support the required API functions.


== !Win32ProductInfo ==

{{{
var Win32ProductInfo: LongWord;
}}}

This global variable provides additional product information about the operating system. The value is one of the _PRODUCT_xxx_ constants defined by Microsoft. The constants are declared in the _PJSysInfo_ unit.

Note that this variable only stores valid information if the _[#Win32HaveProductInfo Win32HaveProductInfo]_ variable is true, otherwise _!Win32ProductInfo_ is set to 0.

Running the host program in compatibility mode _!Win32ProductInfo_ is always spoofed to return the product information that relates to the emulated operating system. If the emulated operating system did not expose product information in this way the value will be `0`.

[v5.0] When running on operating systems where _[TPJOSInfoCanSpoof TPJOSInfo.CanSpoof]_ returns `False`, compatibility mode no longer spoofs _!Win32ProductInfo_ and it will return product information relating to the actual operating system.
