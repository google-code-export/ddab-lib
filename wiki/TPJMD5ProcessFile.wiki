#summary Description of the TPJMD5.ProcessFile method
<wiki:comment>
$Rev$
$Date$
</wiki:comment>

= !ProcessFile method =

*Project:* [MD5Unit MD5 Message Digest Unit].

*Unit:* _PJMD5_.

*Class:* _[TPJMD5 TPJMD5]_

{{{
procedure ProcessFile(const FileName: TFileName);
}}}

== Description == 

This class method is very like the _[TPJMD5Process Process]_ methods in that it adds data to the current hash. In this case the method reads the file named by the _!FileName_ parameter and adds the bytes representing the whole of the file to the current hash.

The file is read into an internal buffer before adding the data to the hash. The buffer's size can be changed by assigning the required size to the _!ReadBufferSize_ property. Find the current size of the buffer by reading the property.

=== Example ===

Suppose you need to get the MD5 hash of the content of a number of files rather than just the one. You can use _!ProcessFile_ to do that, as follows:

{{{
const
  FileNames: array[0..2] of TFileName = (
    'MyFile1', 'MyFile2', 'MyFile3'
  );
var
  Digest: TPJMD5Digest;
  MD5: TPJMD5;
  FN: string;
begin
  MD5 := TPJMD5.Create;
  try
    for FN in FileNames do
      MD5.ProcessFile(FN);
    MD5.Finalize;  // optional
    Digest := MD5.Digest;
    // ...
    // Do something with Digest
    // ...
  finally
    MD5.Free;
  end;
end;
}}}
