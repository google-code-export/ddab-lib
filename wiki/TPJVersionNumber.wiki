#summary TPJVersionNumber record description.
<wiki:comment>
$Rev$
$Date$
</wiki:comment>

= TPJVersionNumber =

*Project:* [VersionInformationComponent Version Information Component].

*Unit:* _PJVersionInfo_.

_TPJVersionNumber_ is a record that stores version numbers from version resources as four discrete values. The record is declared as follows:

{{{
TPJVersionNumber = record
  V1: Word;   // Major version number
  V2: Word;   // Minor version number
  V3: Word;   // Revision version number
  V4: Word;   // Build number
end;
}}}

_V1_ represents the most significant version number and _V4_ represents the least significant number. For example a version number written as 2.5.8.3 would be stored in a variable of type _TPJVersionNumber_ with _V1_=2, _V2_=5, _V3_=8 and _V4_=3.

Common uses for these fields are shown in the comments in the record definition above.

== Enhanced Functionality ==

When compiled with Delphi 2006 and later _TPJVersionNumber_ has some additional functionality. This functionality depends on the availability of advanced records, which were introduced with Delphi 2006.

=== String Assignment ===

A _TPJVersionNumber_ record can be assigned to a string variable. The version number is stored in the string as a dotted quad. If the following code is executed the string variable _S_ will have the value '2.5.8.3'.

{{{
var
  S: string;
  VN: TPJVersionNumber;
begin
  VN.V1 := 2;
  VN.V2 := 5;
  VN.V3 := 8;
  VN.V4 := 3;
  S := VN;
  // ...
end;
}}}

*Note:* You cannot reverse this assignment - a string cannot be assigned to a _TPJVersionNumber_ record.

Users of Delphi 2005 and earlier can use the _[PJVersionInfoFunctions#VerNumToStr VerNumToStr]_ routine to convert a _TPJVersionNumber_ to a string.

=== Operator Overloads ===

_TPJVersionNumber_ records can be compared with each other using all the usual equality operators, i.e. `=`, `<>`, `<`, `<=`, `>` and `>=`. This is particularly useful when checking the version numbers of two copies of an executable file to find which one is the latest version.

For example:

{{{
var
  VI1, VI2: TPJVersionInfo;
begin
  VI1 := nil;
  VI2 := nil;
  try
    VI1 := TPJVersionInfo.Create(nil);
    VI2 := TPJVersionInfo.Create(nil);
    VI1.FileName := 'C:\Path\To\Program1.exe';
    VI2.FileName := 'C:\Path\To\Program2.exe';
    if not VI1.HaveInfo or not VI2.HaveInfo then
      Exit;  // no version info available
    if VI1.FileVersionNumber > VI2.FileVersionNumber then
    begin
      // Program1.exe has later version than Program2.exe
    end;
  finally
    VI1.Free;
    VI2.Free;
  end;
}}}

Users of Delphi 2005 and earlier can use the _[PJVersionInfoFunctions#CompareVerNums CompareVerNums]_ routine to compare two version numbers.
