#summary TPJIStreamWrapper class description.

= TPJIStreamWrapper =

*Project:* [StreamExtensionClasses Stream Extension Classes].

*Unit:* _PJIStreams_.

This class can wrap any _TStream_ derived class and provide access to it by means of an _IStream_ interface. Study the source code of the IStreamWrapDemo demo program to see this class, and those derived from it, in use.

== Methods ==

=== Create ===

Class constructor – creates the wrapper object. The stream to be wrapped is passed to the class constructor.

{{{
constructor Create(const Stream: TStream;
  const CloseStream: Boolean = False);
}}}

  * _Stream_ – stream that is "wrapped" by this object.
  * _!CloseStream_ – optional parameter that is false by default. When true the parameter causes the wrapped stream to be freed when this object is destroyed.

=== Read ===

Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.

{{{
function Read(pv: Pointer; cb: Longint;
  pcbRead: PLongint): HResult; virtual; stdcall;
}}}

  * _pv_ – pointer to buffer to receive data read.
  * _cd_ – number of bytes to read.
  * _pcbRead_ – pointer to storage for number of bytes read – if nil this parameter is ignored.
  * Returns _S_OK_ on success, _S_FAIL_ on error reading stream or _STG_E_INVALIDPOINTER_ if _pv_ is nil.

=== Write ===

Writes a specified number of bytes into the stream object starting at the current seek pointer.

{{{
function Write(pv: Pointer; cb: Longint;
  pcbWritten: PLongint): HResult; virtual; stdcall;
}}}

  * _pv_ – pointer to buffer containing data to be written.
  * _cb_ – number of bytes to write from buffer.
  * _pcbWritten_ – passes out number of bytes actually written unless the parameter is nil.
  * Returns _S_OK_ on success, _STG_E_CANTSAVE_ if the stream can't be written to or _STG_E_INVALIDPOINTER_ if a nil buffer pointer was specified.

=== Seek ===

Changes the seek pointer to a new location relative to the beginning of the stream, the end of the stream, or the current seek pointer.

{{{
function Seek(dlibMove: Largeint; dwOrigin: Longint;
  out libNewPosition: Largeint): HResult; virtual; stdcall;
}}}

  * _dlibMove_ – number of bytes to move from origin.
  * _dwOrigin_ – the origin of the move: _STREAM_SEEK_SET_ (from start of stream), _STREAM_SEEK_CUR_ (from current position) or _STREAM_SEEK_END_ (from end of stream).
  * _libNewPosition_ – the new stream position.
  * Returns _S_OK_ on success, _STG_E_INVALIDPOINTER_ if the seek fails or _STG_E_INVALIDFUNCTION_ if an invalid origin was specified.

=== !SetSize ===

Changes the size of the stream.

{{{
function SetSize(libNewSize: Largeint): HResult; virtual; stdcall;
}}}

  * _libNewSize_ – new stream size.
  * Returns _S_OK_ on success, _E_FAIL_ if we can't set the size, _E_UNEXPECTED_ if there is an exception and _STG_E_INVALIDFUNCTION_ if the size is greater than 2^32.

=== !CopyTo ===

Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream. The number of bytes actually read and written is recorded in _cbRead_ and _cbWritten_. If the source stream has less than the required number of bytes available then all remaining bytes are written.

{{{
function CopyTo(stm: IStream;
  cb: Largeint; out cbRead: Largeint;
  out cbWritten: Largeint): HResult; virtual; stdcall;
}}}

  * _stm_ – destination stream.
  * _cb_ – number of bytes to copy.
  * _cbRead_ – number of bytes actually read from this stream.
  * _cbWritten_ – number of bytes written to destination stream.
  * Returns _S_OK_ on success, _E_UNEXPECTED_ on exception during copying, _E_FAIL_ if the number of bytes is greater than 2^32, _STG_E_INVALIDPOINTER_ if the destination stream is not valid or _STG_E_CANTSAVE_ if the data can't be written.

=== Commit ===

Provided in _IStream_ implementations that support transacted streams to ensure that any changes made to a stream object opened in transacted mode are reflected in the parent storage object. Since we don't support transacted mode there's nothing to do here.

{{{
function Commit(grfCommitFlags: Longint): HResult; virtual; stdcall;
}}}

  * _grfCommitFlags_ – ignored.
  * Returns _S_OK_.

=== Revert ===

Discards all changes that have been made to a transacted stream since the last _IStream.Commit_ call. Since we don't support transacted streams we just return that we've reverted the stream.

{{{
function Revert: HResult; virtual; stdcall;
}}}

  * Returns _STG_E_REVERTED_.

=== !LockRegion ===

Not supported. Restricts access to a specified range of bytes in the stream. It is optional to support this method, and we don't!

{{{
function LockRegion(libOffset: Largeint; cb: Largeint;
  dwLockType: Longint): HResult; virtual; stdcall;
}}}

  * _libOffset_ – ignored.
  * _cb_ – ignored.
  * _dwLockType_ – ignored.
  * Returns _STG_E_INVALIDFUNCTION_.

=== !UnlockRegion ===

Not supported. When supported the method removes the access restriction on a range of bytes previously restricted with _IStream.!LockRegion_.

{{{
function UnlockRegion(libOffset: Largeint; cb: Largeint;
  dwLockType: Longint): HResult; virtual; stdcall;
}}}

  * _libOffset_ – ignored.
  * _cb_ – ignored.
  * _dwLockType_ – ignored.
  * Returns _STG_E_INVALIDFUNCTION_.

=== Stat ===

Retrieves the _TStatStg_ structure for this stream.

{{{
function Stat(out statstg: TStatStg;
  grfStatFlag: Longint): HResult; virtual; stdcall;
}}}

 * _statstg_ – output _STATSTG_ structure for this -stream. The only supported _TStatStg_ elements are:
   * _dwType_ – set to _STGTY_STREAM_;
   * _cbSize_ – set to the size of the underlying stream;
   * _pwcsName_ – the name of stream made up of wrapper class followed by name of wrapped class in parentheses.
 * _grfStatFlag_ – can be _STATFLAG_DEFAULT_, which omits the stream name from the structure, or _STATFLAG_NORMAL_, which includes the stream name. In the latter case the name should be freed using the task allocator.
 * Returns _S_OK_ on success, _E_UNEXPECTED_ on exception, _STG_E_INVALIDFLAG_ if _grfStatFlag_ is not valid or _STG_E_INVALIDPOINTER_ if _statstg_ is not a valid pointer.

=== Clone ===

Not implemented. Where implemented creates a new stream object that references the same bytes as the original stream but provides a separate seek pointer to those bytes.

{{{
function Clone(out stm: IStream): HResult; virtual; stdcall;
}}}

  * _stm_ – not set (value is undefined – be careful not to use).
  * Returns _E_NOTIMPL_.